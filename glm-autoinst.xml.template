<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <add-on t="map">
    <add_on_products t="list">
      <listentry t="map">
        <media_url>cd:/?devices=/dev/disk/by-id/usb-iLO_Virtual_DVD-ROM-0:0</media_url>
        <product>sle-module-basesystem</product>
        <product_dir>/Module-Basesystem</product_dir>
      </listentry>
      <listentry t="map">
        <media_url>cd:/?devices=/dev/disk/by-id/usb-iLO_Virtual_DVD-ROM-0:0</media_url>
        <product>sle-module-server-applications</product>
        <product_dir>/Module-Server-Applications</product_dir>
      </listentry>
      <!-- Module-Public-Cloud is needed for cloud-init -->
      <listentry t="map">
        <media_url>cd:/?devices=/dev/disk/by-id/usb-iLO_Virtual_DVD-ROM-0:0</media_url>
        <product>sle-module-public-cloud</product>
        <product_dir>/Module-Public-Cloud</product_dir>
      </listentry>
    </add_on_products>
  </add-on>
  <bootloader t="map">
    <global t="map">
      <!-- Make sure serial consoles are in both the append and terminal -->
      <append>console=ttyS1,115200 mitigations=auto quiet crashkernel=196M,high crashkernel=72M,low</append>
      <cpu_mitigations>auto</cpu_mitigations>
      <hiddenmenu>false</hiddenmenu>
      <os_prober>false</os_prober>
      <secure_boot>true</secure_boot>
      <terminal>console serial</terminal>
      <serial>serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1</serial>
      <timeout t="integer">5</timeout>
      <update_nvram>true</update_nvram>
      <xen_kernel_append>vga=gfx-1024x768x16 crashkernel=268M\&lt;4G</xen_kernel_append>
    </global>
    <loader_type>grub2-efi</loader_type>
  </bootloader>
  <firewall t="map">
    <!-- If you enable the firewall, make sure 45678/tcp is allowed for SLA calculation -->
    <enable_firewall t="boolean">false</enable_firewall>
    <start_firewall t="boolean">false</start_firewall>
  </firewall>
  <general t="map">
    <ask-list t="list"/>
    <mode t="map">
      <confirm t="boolean">false</confirm>
      <!-- set halt to true for Metal to know first stage is complete and to hook up production networks -->
      <halt t="boolean">true</halt>
      <!-- set final_reboot to true to reboot the system after install and reinitialize cloud-init -->
      <final_reboot t="boolean">true</final_reboot>
    </mode>
    <proposals t="list"/>
    <signature-handling t="map"/>
    <storage t="map"/>
  </general>
  <groups t="list">
    <group t="map">
      <encrypted t="boolean">true</encrypted>
      <gid>100</gid>
      <group_password>x</group_password>
      <groupname>users</groupname>
      <userlist/>
    </group>
  </groups>
  <host t="map">
    <hosts t="list">
      <hosts_entry t="map">
        <host_address>127.0.0.1</host_address>
        <names t="list">
          <name>localhost</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>::1</host_address>
        <names t="list">
          <name>localhost ipv6-localhost ipv6-loopback</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>fe00::0</host_address>
        <names t="list">
          <name>ipv6-localnet</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>ff00::0</host_address>
        <names t="list">
          <name>ipv6-mcastprefix</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>ff02::1</host_address>
        <names t="list">
          <name>ipv6-allnodes</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>ff02::2</host_address>
        <names t="list">
          <name>ipv6-allrouters</name>
        </names>
      </hosts_entry>
      <hosts_entry t="map">
        <host_address>ff02::3</host_address>
        <names t="list">
          <name>ipv6-allhosts</name>
        </names>
      </hosts_entry>
    </hosts>
  </host>
  <kdump t="map">
    <add_crash_kernel t="boolean">true</add_crash_kernel>
    <crash_kernel t="list">
      <listentry>196M,high</listentry>
      <listentry>72M,low</listentry>
    </crash_kernel>
    <crash_xen_kernel>268M\&lt;4G</crash_xen_kernel>
    <general t="map">
      <KDUMPTOOL_FLAGS/>
      <KDUMP_COMMANDLINE/>
      <KDUMP_COMMANDLINE_APPEND/>
      <KDUMP_CONTINUE_ON_ERROR>true</KDUMP_CONTINUE_ON_ERROR>
      <KDUMP_COPY_KERNEL>yes</KDUMP_COPY_KERNEL>
      <KDUMP_CPUS/>
      <KDUMP_DUMPFORMAT>lzo</KDUMP_DUMPFORMAT>
      <KDUMP_DUMPLEVEL>31</KDUMP_DUMPLEVEL>
      <KDUMP_FREE_DISK_SIZE>64</KDUMP_FREE_DISK_SIZE>
      <KDUMP_HOST_KEY/>
      <KDUMP_IMMEDIATE_REBOOT>yes</KDUMP_IMMEDIATE_REBOOT>
      <KDUMP_KEEP_OLD_DUMPS>5</KDUMP_KEEP_OLD_DUMPS>
      <KDUMP_KERNELVER/>
      <KDUMP_NETCONFIG>auto</KDUMP_NETCONFIG>
      <KDUMP_NET_TIMEOUT>30</KDUMP_NET_TIMEOUT>
      <KDUMP_NOTIFICATION_CC/>
      <KDUMP_NOTIFICATION_TO/>
      <KDUMP_POSTSCRIPT/>
      <KDUMP_PRESCRIPT/>
      <KDUMP_REQUIRED_PROGRAMS/>
      <KDUMP_SAVEDIR>/var/crash</KDUMP_SAVEDIR>
      <KDUMP_SMTP_PASSWORD/>
      <KDUMP_SMTP_SERVER/>
      <KDUMP_SMTP_USER/>
      <KDUMP_TRANSFER/>
      <KDUMP_VERBOSE>3</KDUMP_VERBOSE>
      <KEXEC_OPTIONS/>
    </general>
  </kdump>
  <networking t="map">
    <dhcp_options t="map">
      <dhclient_client_id/>
      <dhclient_hostname_option>AUTO</dhclient_hostname_option>
    </dhcp_options>
    <dns t="map">
      <dhcp_hostname t="boolean">true</dhcp_hostname>
      <hostname>localhost</hostname>
      <resolv_conf_policy>auto</resolv_conf_policy>
    </dns>
    <!-- Initialize all interfaces to DHCP for now. cloud-init will take care of the rest -->
    <interfaces t="list">
{{ if .Connections}}
  {{- range .Connections}}
    {{- range $index, $element := .Interfaces}}
      <interface t="map">
        <bootproto>dhcp</bootproto>
        <name>eth{{$index}}</name>
        <startmode>auto</startmode>
      </interface>
    {{- end}} {{/* range .Interfaces  */}}
  {{- end}}  {{/* range .Connections  */}}
{{- end}}    {{/* end if .Connections */}}
    </interfaces>
    <ipv6 t="boolean">true</ipv6>
    <keep_install_network t="boolean">true</keep_install_network>
    <managed t="boolean">false</managed>
    <net-udev t="list">
{{ if .Connections}}
  {{- range .Connections}}
    {{- range $index, $element := .Interfaces}}
      <rule t="map">
        <name>eth{{$index}}</name>
        <rule>ATTR{address}</rule>
        <value>{{.HWAddr}}</value>
      </rule>
    {{- end}} {{/* range .Interfaces  */}}
  {{- end}}  {{/* range .Connections  */}}
{{- end}}    {{/* end if .Connections */}}
    </net-udev>
    <routing t="map">
      <ipv4_forward t="boolean">false</ipv4_forward>
      <ipv6_forward t="boolean">false</ipv6_forward>
    </routing>
  </networking>
  <ntp-client t="map">
    <ntp_policy>auto</ntp_policy>
    <ntp_servers t="list"/>
    <ntp_sync>manual</ntp_sync>
  </ntp-client>
  <partitioning t="list">
    <drive t="map">
      <!-- Make sure the device is kept so that the pre-script can replace with the correct device -->
      <device>/dev/sda</device>
      <disklabel>gpt</disklabel>
      <enable_snapshots t="boolean">true</enable_snapshots>
      <partitions t="list">
        <partition t="map">
          <create t="boolean">true</create>
          <filesystem t="symbol">vfat</filesystem>
          <format t="boolean">true</format>
          <fstopt>utf8</fstopt>
          <mount>/boot/efi</mount>
          <mountby t="symbol">uuid</mountby>
          <partition_id t="integer">259</partition_id>
          <partition_nr t="integer">1</partition_nr>
          <resize t="boolean">false</resize>
          <size>536870912</size>
        </partition>
        <partition t="map">
          <create t="boolean">true</create>
          <create_subvolumes t="boolean">true</create_subvolumes>
          <filesystem t="symbol">btrfs</filesystem>
          <format t="boolean">true</format>
          <mount>/</mount>
          <mountby t="symbol">uuid</mountby>
          <partition_id t="integer">131</partition_id>
          <partition_nr t="integer">2</partition_nr>
          <quotas t="boolean">true</quotas>
          <resize t="boolean">false</resize>
          <size>42949672960</size>
          <subvolumes t="list">
            <subvolume t="map">
              <copy_on_write t="boolean">false</copy_on_write>
              <path>var</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>usr/local</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>tmp</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>srv</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>root</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>opt</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>boot/grub2/x86_64-efi</path>
            </subvolume>
            <subvolume t="map">
              <copy_on_write t="boolean">true</copy_on_write>
              <path>boot/grub2/i386-pc</path>
            </subvolume>
          </subvolumes>
          <subvolumes_prefix>@</subvolumes_prefix>
        </partition>
        <partition t="map">
          <create t="boolean">true</create>
          <filesystem t="symbol">xfs</filesystem>
          <format t="boolean">true</format>
          <mount>/home</mount>
          <mountby t="symbol">uuid</mountby>
          <partition_id t="integer">131</partition_id>
          <partition_nr t="integer">3</partition_nr>
          <resize t="boolean">false</resize>
          <size>954569064448</size>
        </partition>
        <partition t="map">
          <create t="boolean">true</create>
          <filesystem t="symbol">swap</filesystem>
          <format t="boolean">true</format>
          <mount>swap</mount>
          <mountby t="symbol">uuid</mountby>
          <partition_id t="integer">130</partition_id>
          <partition_nr t="integer">4</partition_nr>
          <resize t="boolean">false</resize>
          <size>2148212224</size>
        </partition>
      </partitions>
      <type t="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <proxy t="map">
    <enabled t="boolean">false</enabled>
  </proxy>
  <security t="map">
    <console_shutdown>reboot</console_shutdown>
    <cracklib_dict_path>/usr/lib/cracklib_dict</cracklib_dict_path>
    <disable_restart_on_update>no</disable_restart_on_update>
    <disable_stop_on_removal>no</disable_stop_on_removal>
    <extra_services>insecure</extra_services>
    <fail_delay>3</fail_delay>
    <gid_max>60000</gid_max>
    <gid_min>1000</gid_min>
    <hibernate_system>active_console</hibernate_system>
    <kernel.sysrq>184</kernel.sysrq>
    <mandatory_services>secure</mandatory_services>
    <net.ipv4.ip_forward>0</net.ipv4.ip_forward>
    <net.ipv4.tcp_syncookies>0</net.ipv4.tcp_syncookies>
    <net.ipv6.conf.all.forwarding>0</net.ipv6.conf.all.forwarding>
    <pass_max_days>99999</pass_max_days>
    <pass_min_days>0</pass_min_days>
    <pass_min_len>5</pass_min_len>
    <pass_warn_age>7</pass_warn_age>
    <passwd_encryption>sha512</passwd_encryption>
    <passwd_remember_history>0</passwd_remember_history>
    <passwd_use_cracklib>yes</passwd_use_cracklib>
    <permission_security>easy</permission_security>
    <run_updatedb_as/>
    <selinux_mode>disabled</selinux_mode>
    <smtpd_listen_remote>no</smtpd_listen_remote>
    <sys_gid_max>499</sys_gid_max>
    <sys_gid_min>100</sys_gid_min>
    <sys_uid_max>499</sys_uid_max>
    <sys_uid_min>100</sys_uid_min>
    <syslog_on_no_error>no</syslog_on_no_error>
    <uid_max>60000</uid_max>
    <uid_min>1000</uid_min>
    <useradd_cmd>/usr/sbin/useradd.local</useradd_cmd>
    <userdel_postcmd>/usr/sbin/userdel-post.local</userdel_postcmd>
    <userdel_precmd>/usr/sbin/userdel-pre.local</userdel_precmd>
  </security>
  <services-manager t="map">
    <default_target>multi-user</default_target>
    <services t="map">
      <enable t="list">
        <service>YaST2-Firstboot</service>
        <service>YaST2-Second-Stage</service>
        <service>apparmor</service>
        <service>auditd</service>
        <service>klog</service>
        <service>cron</service>
        <service>firewalld</service>
        <service>wickedd-auto4</service>
        <service>wickedd-dhcp4</service>
        <service>wickedd-dhcp6</service>
        <service>wickedd-nanny</service>
        <service>display-manager</service>
        <service>haveged</service>
        <service>irqbalance</service>
        <service>issue-generator</service>
        <service>kbdsettings</service>
        <service>kdump</service>
        <service>kdump-early</service>
        <service>lvm2-monitor</service>
        <service>wicked</service>
        <service>nscd</service>
        <service>postfix</service>
        <service>purge-kernels</service>
        <service>rollback</service>
        <service>rsyslog</service>
        <service>smartd</service>
        <service>sshd</service>
        <service>systemd-remount-fs</service>
        <!--
          Note: cloud-init services are not listed here
          because we don't want then run at the beginning
          of the 2nd stage
        -->
        <!-- 
          Note: node_exporter is not listed here because it
          is not an installed service at this point
        -->
      </enable>
    </services>
  </services-manager>
  <software t="map">
    <install_recommended t="boolean">true</install_recommended>
    <instsource/>
    <packages t="list">
      <package>xfsprogs</package>
      <package>wicked</package>
      <package>snapper</package>
      <package>sles-release</package>
      <package>sle-module-server-applications-release</package>
      <package>sle-module-basesystem-release</package>
      <package>shim</package>
      <package>openssh</package>
      <package>numactl</package>
      <package>mokutil</package>
      <package>kexec-tools</package>
      <package>kdump</package>
      <package>irqbalance</package>
      <package>grub2-x86_64-efi</package>
      <package>glibc</package>
      <package>firewalld</package>
      <package>e2fsprogs</package>
      <package>dosfstools</package>
      <package>btrfsprogs</package>
      <package>autoyast2</package>
      <!-- Need node_exporter for SLA calculation -->
      <package>golang-github-prometheus-node_exporter</package>
      <!-- Need cloud-init for first-boot configuration -->
      <package>cloud-init</package>
      <!-- Need multipath for iSCSI -->
      <package>multipath-tools</package>
    </packages>
    <patterns t="list">
      <pattern>apparmor</pattern>
      <pattern>base</pattern>
      <pattern>basic_desktop</pattern>
      <pattern>enhanced_base</pattern>
      <pattern>minimal_base</pattern>
      <pattern>x11</pattern>
      <pattern>x11_yast</pattern>
      <pattern>yast2_basis</pattern>
    </patterns>
    <products t="list">
      <product>SLES</product>
    </products>
  </software>
  <ssh_import t="map">
    <copy_config t="boolean">false</copy_config>
    <import t="boolean">false</import>
  </ssh_import>
  <suse_register t="map">
    <do_registration t="boolean">false</do_registration>
  </suse_register>
  <timezone t="map">
    <timezone>America/Chicago</timezone>
  </timezone>
  <user_defaults t="map">
    <expire/>
    <group>100</group>
    <groups/>
    <home>/home</home>
    <inactive>-1</inactive>
    <no_groups t="boolean">true</no_groups>
    <shell>/bin/bash</shell>
    <skel>/etc/skel</skel>
    <umask>022</umask>
  </user_defaults>
  <users t="list">
    <user t="map">
      <authorized_keys t="list"/>
      <encrypted t="boolean">true</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <home_btrfs_subvolume t="boolean">false</home_btrfs_subvolume>
      <password_settings t="map">
        <expire/>
        <flag/>
        <inact/>
        <max/>
        <min/>
        <warn/>
      </password_settings>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>$6$bFPLKRB7r8BgV0Vz$Jq.dBr9TdpfQYAnwuvIH7VhoUSSv/94MS6HKX03/CrYuXI92WKc/t96twOs2lIl.TJN.ylpwEXHxqUBfg/SIw/</user_password>
      <username>root</username>
    </user>
  </users>
  <scripts>
    <pre-scripts config:type="list">
      <script>
        <filename>pre-script.sh</filename>
        <interpreter>shell</interpreter>
        <source>
          <![CDATA[
            # First copy the provided autoinst file to modified so we can make changes and they will be picked up
            cp /tmp/profile/autoinst.xml /tmp/profile/modified.xml

            # Since our install method depends on both iLO CDROM and vfloppy
            # devices being present, wait (for up to 30 seconds) until both are present
            for i in `seq 10`; do if [ $(lsblk --scsi | egrep "Virtual_DVD-ROM|Virtual_HDD|Virtual_USB" | wc -l) -eq 2 ]; then break; fi; sleep 3; done

            # determine the iLO virtual media devices before starting
            # 'lsblk --scsi' will report:
            #  * 'Virtual_USB' for the iLO virtual floppy
            #  * 'Virtual_DVD-ROM' for the iLO CD/DVD.
            #  * 'Virtual_HDD_0' for the SDFlex RMC.
            # and we want to ignore all of these disks
            lsblk --scsi | awk '/Virtual_DVD-ROM|Virtual_HDD|Virtual_USB/ { print $1 }' > /tmp/ilo-disks.cfg

            # now determine the 1st drive that will be the default root disk (if no RAID setup)
            # by getting all block devices, remove ilo-disks, sort (alphabetical order), take 1st one on the list
            DEF_BOOT_DISK=$(lsblk -n --scsi | awk '{ print $1 }' | grep -vf /tmp/ilo-disks.cfg | sort | head -1)

            # Find the vfloppy media among the iLO/RMC virtual media devices
            # to get the cloud-init files out. Make sure the filenames (case)
            # match what is defined in the service yml file
            mkdir -p /mounts/vmedia
            for vmedia in $(lsblk --scsi | awk '/Virtual_DVD-ROM|Virtual_HDD|Virtual_USB/ { printf "/dev/%s\n", $1 }')
            do
              mount $vmedia /mounts/vmedia
              if [ -f /mounts/vmedia/92_DATASOURCE.CFG ] && [ -f /mounts/vmedia/95_DATASOURCE.CFG ]; then
                cp /mounts/vmedia/92_DATASOURCE.CFG /tmp/
                cp /mounts/vmedia/95_DATASOURCE.CFG /tmp/
                umount /mounts/vmedia
                break
              fi
              umount /mounts/vmedia
            done

            # Replace the /dev/sda device with the device we want to install to
            {{/* Determine if the Machine/Host has a RAID logical volume setup */}}
            {{/* and get the RAID logical volume (either UUID/NAA or EUI) for use below */}}
            {{- $raiduuid := "" }}
            {{- $euiraid := "" }}
            {{- if .DeviceLayouts}}
            # .DeviceLayouts: {{.DeviceLayouts}}
              {{- range .DeviceLayouts}}
            # .Device: {{.Device}}
                {{- if uuid .Device}}
            # Logical Volume Found via UUID/NAA: {{.Device}}
                  {{- $raiduuid = .Device}}
                {{- end}}
                {{- if hasprefix .Device "eui."}}
            # Logical Volume Found via EUI: {{.Device}}
                  {{- $euiraid = trimprefix .Device "eui."}}
                {{- end}}
              {{- end}}
            {{- end}}

            # Set the install device appropriately
            {{- if $raiduuid}}
            sed -i "s@<device>/dev/sda</device>@<device>/dev/disk/by-id/scsi-3{{lower $raiduuid}}</device>@" /tmp/profile/modified.xml
            {{- else }} {{- if $euiraid}}
            sed -i "s@<device>/dev/sda</device>@<device>/dev/disk/by-id/nvme-eui.{{lower $euiraid}}</device>@" /tmp/profile/modified.xml
            {{- else}}
            sed -i "s@<device>/dev/sda</device>@<device>/dev/${DEF_BOOT_DISK}</device>@" /tmp/profile/modified.xml
            {{- end}}{{- end}}

          ]]>
        </source>
      </script>
    </pre-scripts>
    <chroot-scripts config:type="list">
      <script>
        <filename>chroot.sh</filename>
        <interpreter>shell</interpreter>
        <source>
          <![CDATA[
            # Configure cloud-init for GLM server configuration
            echo "datasource_list: [\"None\"]" >> /mnt/etc/cloud/cloud.cfg

            # disable password login over SSH (make PasswordAuthentication options 'no')
            grep -q ^PasswordAuthentication /mnt/etc/ssh/sshd_config && \
                sed -i "s/^PasswordAuthentication.*$/PasswordAuthentication no/" /mnt/etc/ssh/sshd_config || \
                echo "PasswordAuthentication no" >> /mnt/etc/ssh/sshd_config

            # enable root password login from the GreenLake Metal console/serial port
            echo ttyS1 >> /mnt/etc/securetty

            # Copy the cloud-init config files over
            cp /tmp/92_DATASOURCE.CFG /mnt/etc/cloud/cloud.cfg.d/92_datasource.cfg
            cp /tmp/95_DATASOURCE.CFG /mnt/etc/cloud/cloud.cfg.d/95_datasource.cfg
          ]]>
        </source>
      </script>
    </chroot-scripts>
    <post-scripts config:type="list">
      <script>
        <filename>post-script.sh</filename>
        <interpreter>shell</interpreter>
        <source>
          <![CDATA[
            # Now we should enable the cloud-init services
            systemctl enable cloud-init-local
            systemctl enable cloud-init
            systemctl enable cloud-config
            systemctl enable cloud-final
          ]]>
        </source>
      </script>
    </post-scripts>
  </scripts>
</profile>